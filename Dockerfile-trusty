# Creates docker container that runs HCP Pipeline algorithms
#
#

# Use Ubuntu 14.04 LTS
FROM flywheel/fsl-base:5.0.9-trusty

LABEL maintainer="Flywheel <support@flywheel.io>"

#############################################
# FSL 5.0.9 is a part of the base image.  Update the environment variables

# Configure FSL environment
ENV FSLDIR=/usr/share/fsl/5.0
ENV FSL_DIR="${FSLDIR}"
ENV FSLOUTPUTTYPE=NIFTI_GZ
ENV PATH=/usr/lib/fsl/5.0:$PATH
ENV FSLMULTIFILEQUIT=TRUE
ENV POSSUMDIR=/usr/share/fsl/5.0
ENV LD_LIBRARY_PATH=/usr/lib/fsl/5.0:$LD_LIBRARY_PATH
ENV FSLTCLSH=/usr/bin/tclsh
ENV FSLWISH=/usr/bin/wish

#############################################
# Download and install Connectome Workbench 1.3.2
# Compatible with HCP v4.0.0
RUN cd /opt/ && \
    wget https://www.humanconnectome.org/storage/app/media/workbench/workbench-linux64-v1.4.2.zip -O workbench.zip && \
    unzip workbench.zip && \
    rm workbench.zip && \
    cd /

ENV CARET7DIR=/opt/workbench/bin_linux64

#############################################
# Download and install HCP Pipelines

# Using v4.0.0
RUN wget -nv https://github.com/Washington-University/HCPpipelines/archive/v4.0.0.tar.gz -O pipelines.tar.gz && \
    cd /opt/ && \
    tar zxvf /pipelines.tar.gz && \
    mv /opt/*ipelines* /opt/HCP-Pipelines && \
    rm /pipelines.tar.gz && \
    cd /

# Set up specific environment variables for the HCP Pipeline
ENV FSL_DIR="${FSLDIR}"
ENV HCPPIPEDIR=/opt/HCP-Pipelines
ENV MSMBINDIR=${HCPPIPEDIR}/MSMBinaries
ENV MSMCONFIGDIR=${HCPPIPEDIR}/MSMConfig
#ENV MATLAB_COMPILER_RUNTIME=/media/myelin/brainmappers/HardDrives/1TB/MATLAB_Runtime/v901
#ENV FSL_FIXDIR=/media/myelin/aahana/fix1.06

#For HCP Pipeline v3.x
ENV MSMBin=${HCPPIPEDIR}/MSMBinaries

ENV HCPPIPEDIR_Templates=${HCPPIPEDIR}/global/templates
ENV HCPPIPEDIR_Bin=${HCPPIPEDIR}/global/binaries
ENV HCPPIPEDIR_Config=${HCPPIPEDIR}/global/config

ENV HCPPIPEDIR_PreFS=${HCPPIPEDIR}/PreFreeSurfer/scripts
ENV HCPPIPEDIR_FS=${HCPPIPEDIR}/FreeSurfer/scripts
ENV HCPPIPEDIR_PostFS=${HCPPIPEDIR}/PostFreeSurfer/scripts
ENV HCPPIPEDIR_fMRISurf=${HCPPIPEDIR}/fMRISurface/scripts
ENV HCPPIPEDIR_fMRIVol=${HCPPIPEDIR}/fMRIVolume/scripts
ENV HCPPIPEDIR_tfMRI=${HCPPIPEDIR}/tfMRI/scripts
ENV HCPPIPEDIR_dMRI=${HCPPIPEDIR}/DiffusionPreprocessing/scripts
ENV HCPPIPEDIR_dMRITract=${HCPPIPEDIR}/DiffusionTractography/scripts
ENV HCPPIPEDIR_Global=${HCPPIPEDIR}/global/scripts
ENV HCPPIPEDIR_tfMRIAnalysis=${HCPPIPEDIR}/TaskfMRIAnalysis/scripts

#try to reduce strangeness from locale and other environment settings
ENV LC_ALL=C
ENV LANGUAGE=C
#POSIXLY_CORRECT currently gets set by many versions of fsl_sub, unfortunately, but at least don't pass it in if the user has it set in their usual environment
RUN unset POSIXLY_CORRECT

#############################################
# Download and install FreeSurfer
RUN apt-get -y update \
    && apt-get install -y wget && \
    wget -nv -O- ftp://surfer.nmr.mgh.harvard.edu/pub/dist/freesurfer/5.3.0-HCP/freesurfer-Linux-centos4_x86_64-stable-pub-v5.3.0-HCP.tar.gz | tar zxv -C /opt \
    --exclude='freesurfer/trctrain' \
    --exclude='freesurfer/subjects/fsaverage_sym' \
    --exclude='freesurfer/subjects/fsaverage3' \
    --exclude='freesurfer/subjects/fsaverage4' \
    --exclude='freesurfer/subjects/fsaverage5' \
    --exclude='freesurfer/subjects/fsaverage6' \
    --exclude='freesurfer/subjects/cvs_avg35' \
    --exclude='freesurfer/subjects/cvs_avg35_inMNI152' \
    --exclude='freesurfer/subjects/bert' \
    --exclude='freesurfer/subjects/V1_average' \
    --exclude='freesurfer/average/mult-comp-cor' \
    --exclude='freesurfer/lib/cuda' \
    --exclude='freesurfer/lib/qt' && \
    apt-get install -y tcsh bc tar libgomp1 perl-modules curl

# Set up the FreeSurfer environment
ENV OS Linux
ENV FS_OVERRIDE 0
#ENV FIX_VERTEX_AREA=
ENV SUBJECTS_DIR /opt/freesurfer/subjects
ENV FSF_OUTPUT_FORMAT nii.gz
ENV MNI_DIR /opt/freesurfer/mni
ENV LOCAL_DIR /opt/freesurfer/local
ENV FREESURFER_HOME /opt/freesurfer
ENV FSFAST_HOME /opt/freesurfer/fsfast
ENV MINC_BIN_DIR /opt/freesurfer/mni/bin
ENV MINC_LIB_DIR /opt/freesurfer/mni/lib
ENV MNI_DATAPATH /opt/freesurfer/mni/data
ENV FMRI_ANALYSIS_DIR /opt/freesurfer/fsfast
ENV PERL5LIB /opt/freesurfer/mni/lib/perl5/5.8.5
ENV MNI_PERL5LIB /opt/freesurfer/mni/lib/perl5/5.8.5
ENV PATH /opt/freesurfer/bin:/opt/freesurfer/fsfast/bin:/opt/freesurfer/tktools:/opt/freesurfer/mni/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:$PATH

#############################################
# Download and install gradient unwarp script
# note: python-dev needed for Ubuntu 14.04 (but not for 16.04)
# latest = v1.0.3
RUN apt-get -y update \
    && apt-get install -y --no-install-recommends \
    python-dev \
    python-numpy \
    python-scipy \
    python-nibabel \
    libc6 \
    libgomp1 && \
    wget -nv https://github.com/Washington-University/gradunwarp/archive/v1.0.3.tar.gz -O gradunwarp.tar.gz && \
    cd /opt/ && \
    tar zxvf /gradunwarp.tar.gz && \
    mv /opt/gradunwarp-* /opt/gradunwarp && \
    cd /opt/gradunwarp/ && \
    python setup.py install && \
    rm /gradunwarp.tar.gz && \
    cd /


#############################################
# Download amnd install MSM_HOCR v3 binary
ENV MSMBINDIR=${HCPPIPEDIR}/MSMBinaries

RUN mkdir -p ${MSMBINDIR} && \
    wget -nv https://github.com/ecr05/MSM_HOCR/releases/download/1.0/msm_ubuntu14.04 -O ${MSMBINDIR}/msm && \
    chmod +x ${MSMBINDIR}/msm
#############################################


#############################################
# Setup FIX, including MATLAB and R

#############################################
# Download and install R and necessary packages

#From https://fsl.fmrib.ox.ac.uk/fsl/fslwiki/FIX/UserGuide
#R version >=3.3.0
#'kernlab' version 0.9.24
#'ROCR' version 1.0.7
#'class' version 7.3.14
#'party' version 1.0.25
#'e1071' version 1.6.7
#'randomForest' version 4.6.12

#RUN apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E084DAB9 && \
#    echo "deb http://cran.rstudio.com/bin/linux/ubuntu trusty/" >> /etc/apt/sources.list.d/cran-rstudio.list && \
#    apt-get update && \
#    apt-get install -force-yes --no-install-recommends r-base-core=3.3.1-* r-base-dev=3.3.1-* && \
#    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
#RUN echo "deb http://cran.rstudio.com/bin/linux/ubuntu trusty/" >> /etc/apt/sources.list.d/cran-rstudio.list && \
#    apt-get update && \
#    apt-get install -force-yes --no-install-recommends r-base-core=3.3.1-* r-base-dev=3.3.1-* && \
#    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*
#




RUN apt-get install -y software-properties-common && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys E298A3A825C0D65DFD57CBB651716619E084DAB9 && \
    add-apt-repository "deb http://cran.rstudio.com/bin/linux/ubuntu trusty/"  && \
    apt-get update

RUN apt-get install -y --no-install-recommends --allow-unauthenticated r-base-core=3.4.4-*  r-base-dev=3.4.4-*

RUN apt-get install -y build-essential libcurl4-gnutls-dev libxml2-dev libssl-dev



RUN Rscript -e 'install.packages("devtools",dependencies = TRUE)'
RUN Rscript -e 'require(devtools);install_version("kernlab",version = "0.9-24", repos="http://cran.us.r-project.org")'
RUN Rscript -e 'require(devtools);install_version("ROCR",version = "1.0-7", repos="http://cran.us.r-project.org")'
RUN Rscript -e 'require(devtools);install_version("class",version = "7.3-14", repos="http://cran.us.r-project.org")'

RUN Rscript -e 'require(devtools);install_version("mvtnorm",version = "1.0-8", repos="http://cran.us.r-project.org")'
RUN Rscript -e 'require(devtools);install_version("multcomp", version="1.4-8", repos="http://cran.us.r-project.org")'
RUN Rscript -e 'require(devtools);install_version("modeltools", version="0.2-21", repos="http://cran.us.r-project.org")'
RUN Rscript -e 'require(devtools);install_version("coin", version="1.2-2", repos="http://cran.us.r-project.org",dependencies=FALSE)'
RUN Rscript -e 'require(devtools);install_version("libcoin",version = "1.0-5", repos="http://cran.us.r-project.org")'
RUN Rscript -e 'require(devtools);install_version("strucchange", repos="http://cran.us.r-project.org")'

RUN Rscript -e 'require(devtools);install_version("party",version = "1.0-25", repos="http://cran.us.r-project.org",dependencies=FALSE)'
RUN Rscript -e 'require(devtools);install_version("e1071",version = "1.6-7", repos="http://cran.us.r-project.org")'
RUN Rscript -e 'require(devtools);install_version("randomForest",version = "4.6-12", repos="http://cran.us.r-project.org")'

RUN FSL_FIX_R_CMD=` which R `

##### Possible:
#sudo apt-get install r-base r-cran-devtools

#Then on either Linux:

#require(devtools)
#chooseCRANmirror()
#install_version("kernlab", version="0.9-24")
#install_version("ROCR", version="1.0-7")
#install_version("class", version="7.3-14")
#install_version("mvtnorm", version="1.0.8")
#install_version("multcomp", version="1.4-8")
#install_version("coin", version="1.2.2")
#install_version("party", version="1.0-25")
#install_version("e1071", version="1.6-7")
#install_version("randomForest", version="4.6-12")



#############################################
# Download and install FSL ICA-FIX

RUN apt-get -y update && \
    apt-get install -y wget && \
    wget -nv http://www.fmrib.ox.ac.uk/~steve/ftp/fix-1.06.12.tar.gz -O /fix.tar.gz && \
    mkdir -p /tmp/fix && \
    cd /tmp/fix && \
    tar zxvf /fix.tar.gz --exclude="compiled/"  --exclude="MCRInstaller.zip" && \
    mv /tmp/fix/fix* /opt/fix && \
    rm /fix.tar.gz && \
    cd / && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

ENV FSL_FIXDIR=/opt/fix

# Download and install Matlab Compiler Runtime v8.5 (2017b)
# Install the MCR dependencies and some things we'll need and download the MCR
# from Mathworks -silently install it
# See http://www.mathworks.com/products/compiler/mcr/ for more info.
# Adapted from https://github.com/flywheel-apps/matlab-mcr

RUN apt-get -qq update && apt-get -qq install -y \
    unzip \
    xorg \
    wget \
    curl && \
    mkdir /mcr-install && \
    mkdir /opt/mcr && \
    cd /mcr-install && \
    wget -nv http://www.mathworks.com/supportfiles/downloads/R2017b/deployment_files/R2017b/installers/glnxa64/MCR_R2017b_glnxa64_installer.zip && \
    cd /mcr-install && \
    unzip -q MCR_R2017b_glnxa64_installer.zip && \
    ./install -destinationFolder /opt/mcr -agreeToLicense yes -mode silent && \
    cd / && \
    rm -rf mcr-install

#ENV LD_LIBRARY_PATH /opt/mcr/v85/runtime/glnxa64:/opt/mcr/v85/bin/glnxa64:/opt/mcr/v85/sys/os/glnxa64 #skip this
ENV XAPPLRESDIR /opt/mcr/v93/X11/app-defaults



# Make directory for flywheel spec (v0)
ENV FLYWHEEL /flywheel/v0
WORKDIR ${FLYWHEEL}

# Install gear dependencies
COPY requirements.txt ${FLYWHEEL}/requirements.txt
RUN apt-get install -y --no-install-recommends \
    gawk \
    python3-pip \
    zip \
    unzip \
    gzip && \
    pip3 install --upgrade pip && \
    apt-get remove -y python3-urllib3 && \
    pip3.4 install -r requirements.txt && \
    rm -rf /root/.cache/pip && \
    rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/*

# Copy executable/manifest to Gear
COPY run.py ${FLYWHEEL}/run.py
COPY utils ${FLYWHEEL}/utils
COPY manifest.json ${FLYWHEEL}/manifest.json

# Copy additional scripts and scenes
COPY scripts /tmp/scripts


# ENV preservation for Flywheel Engine
RUN python -c 'import os, json; f = open("/tmp/gear_environ.json", "w"); json.dump(dict(os.environ), f)'

#ENV LD_LIBRARY_PATH /opt/mcr/v90/runtime/glnxa64:/opt/mcr/v90/bin/glnxa64:/opt/mcr/v90/sys/os/glnxa64:/opt/mcr/v90/extern/bin/glnxa64


# Configure entrypoint
ENTRYPOINT ["/flywheel/v0/run.py"]